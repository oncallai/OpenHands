name: Build and Push Docker Image

on:
  workflow_run:
    workflows: ["Check", "Test Runtime API"]
    types:
      - completed
    branches:
      - main
      - "*"
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment tag for image'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      image_tag:
        description: 'Docker image tag to deploy (optional, defaults to commit SHA)'
        required: false
        type: string

env:
  GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID || 'kustodian-dev01' }}
  REGISTRY_HOSTNAME: gcr.io
  IMAGE_NAME: runtime-api
  RELEVANT_SHA: ${{ github.event.pull_request.head.sha || github.sha }}

jobs:
  check-prerequisites:
    name: Check Prerequisites
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name != 'workflow_run' }}
    steps:
      - name: Check workflow run result
        if: github.event_name == 'workflow_run'
        run: |
          echo "Prerequisite workflow completed with result: ${{ github.event.workflow_run.conclusion }}"
          if [[ "${{ github.event.workflow_run.conclusion }}" != "success" ]]; then
            echo "❌ Prerequisite workflow failed. Stopping deployment."
            exit 1
          fi
          echo "✅ Prerequisites passed. Proceeding with build and push."

  define-matrix:
    runs-on: ubuntu-latest
    outputs:
      base_image: ${{ steps.define-base-images.outputs.base_image }}
    steps:
      - name: Define base images
        shell: bash
        id: define-base-images
        run: |
          json=$(jq -n -c '[
              { image: "nikolaik/python-nodejs:python3.12-nodejs22", tag: "nikolaik" },
              { image: "ubuntu:24.04", tag: "ubuntu" }
            ]')
          echo "base_image=$json" >> "$GITHUB_OUTPUT"

  set-environment:
    name: Set Environment Variables
    runs-on: ubuntu-latest
    needs: check-prerequisites
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      image_tag: ${{ steps.set-env.outputs.image_tag }}
      registry_url: ${{ steps.set-env.outputs.registry_url }}
      is_trusted: ${{ steps.set-env.outputs.is_trusted }}
    steps:
      - name: Set environment based on branch/input
        id: set-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "image_tag=${{ github.event.inputs.image_tag || github.sha }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "image_tag=${{ github.sha }}" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "image_tag=${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

          # Set registry URL for GCR
          echo "registry_url=${{ env.REGISTRY_HOSTNAME }}/${{ env.GCP_PROJECT_ID }}" >> $GITHUB_OUTPUT

          # Check if this is a trusted source (not fork, not Dependabot)
          if [[ "${{ github.event.pull_request.head.repo.fork }}" != "true" && "${{ github.actor }}" != "dependabot[bot]" ]]; then
            echo "is_trusted=true" >> $GITHUB_OUTPUT
            echo "✅ Trusted source - will authenticate and push to registry"
          else
            echo "is_trusted=false" >> $GITHUB_OUTPUT
            echo "⚠️ Untrusted source (fork or Dependabot) - will build only, no push"
          fi

  build-runtime:
    name: Build Runtime Image
    runs-on: ubuntu-latest
    needs: [set-environment, define-matrix]
    strategy:
      matrix:
        base_image: ${{ fromJson(needs.define-matrix.outputs.base_image) }}
    outputs:
      image_url: ${{ steps.build.outputs.image_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Debug Context Information
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Actor: ${{ github.actor }}"
          echo "Is fork: ${{ github.event.pull_request.head.repo.fork }}"
          echo "Repository: ${{ github.repository }}"
          echo "Is trusted: ${{ needs.set-environment.outputs.is_trusted }}"
          echo "Base image: ${{ matrix.base_image.image }}"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install poetry via pipx
        run: pipx install poetry

      - name: Install Python dependencies using Poetry
        run: make install-python-dependencies POETRY_GROUP=main INSTALL_PLAYWRIGHT=0

      - name: Create source distribution and Dockerfile
        run: poetry run python3 openhands/runtime/utils/runtime_build.py --base_image ${{ matrix.base_image.image }} --build_folder containers/runtime --force_rebuild

      # Only authenticate to GCP for trusted sources
      - name: Authenticate to Google Cloud
        if: needs.set-environment.outputs.is_trusted == 'true'
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_DEV_REGISTRY_SA_KEY }}

      # Only set up Cloud SDK for trusted sources
      - name: Set up Cloud SDK
        if: needs.set-environment.outputs.is_trusted == 'true'
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}

      # Only configure Docker for trusted sources
      - name: Configure Docker to use gcloud as credential helper for GCR
        if: needs.set-environment.outputs.is_trusted == 'true'
        run: |
          gcloud auth configure-docker ${{ env.REGISTRY_HOSTNAME }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build and push for trusted sources
      - name: Build and push runtime image (Trusted)
        if: needs.set-environment.outputs.is_trusted == 'true'
        id: build
        run: |
          IMAGE_URL="${{ needs.set-environment.outputs.registry_url }}/${{ env.IMAGE_NAME }}:${{ needs.set-environment.outputs.image_tag }}-${{ matrix.base_image.tag }}"

          # Build image
          docker build -t $IMAGE_URL containers/runtime

          # Push image
          docker push $IMAGE_URL

          # Also tag as latest for the environment
          ENV_IMAGE_URL="${{ needs.set-environment.outputs.registry_url }}/${{ env.IMAGE_NAME }}:${{ needs.set-environment.outputs.environment }}-latest-${{ matrix.base_image.tag }}"
          docker tag $IMAGE_URL $ENV_IMAGE_URL
          docker push $ENV_IMAGE_URL

          echo "image_url=$IMAGE_URL" >> $GITHUB_OUTPUT

      # Build only for untrusted sources (forks, Dependabot)
      - name: Build runtime image only (Untrusted - Fork/Dependabot)
        if: needs.set-environment.outputs.is_trusted == 'false'
        run: |
          IMAGE_URL="${{ needs.set-environment.outputs.registry_url }}/${{ env.IMAGE_NAME }}:${{ needs.set-environment.outputs.image_tag }}-${{ matrix.base_image.tag }}"

          echo "🔒 Building runtime Docker image without push (untrusted source)"
          echo "Image would be: $IMAGE_URL"

          # Build image locally
          docker build -t local-test-runtime-${{ matrix.base_image.tag }} containers/runtime

          echo "✅ Runtime Docker image built successfully (not pushed due to security restrictions)"

      # Upload runtime source for untrusted sources
      - name: Upload runtime source for fork/dependabot
        if: needs.set-environment.outputs.is_trusted == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: runtime-src-${{ matrix.base_image.tag }}
          path: containers/runtime

      # Output build summary for trusted sources
      - name: Output Build Summary (Trusted)
        if: needs.set-environment.outputs.is_trusted == 'true'
        run: |
          echo "### Runtime Docker Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ needs.set-environment.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Base Image**: ${{ matrix.base_image.image }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image Built**: ${{ steps.build.outputs.image_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry**: ${{ env.REGISTRY_HOSTNAME }}/${{ env.GCP_PROJECT_ID }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image Tag**: ${{ needs.set-environment.outputs.image_tag }}-${{ matrix.base_image.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Runtime Docker image successfully built and pushed to GCR!**" >> $GITHUB_STEP_SUMMARY
          echo ""
          echo "To deploy this image, use:"
          echo "docker pull ${{ steps.build.outputs.image_url }}"

      # Output build summary for untrusted sources
      - name: Output Build Summary (Untrusted)
        if: needs.set-environment.outputs.is_trusted == 'false'
        run: |
          echo "### Runtime Docker Build Summary (Fork/Dependabot)" >> $GITHUB_STEP_SUMMARY
          echo "- **Source**: Fork or Dependabot" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ needs.set-environment.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Base Image**: ${{ matrix.base_image.image }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image Tag**: ${{ needs.set-environment.outputs.image_tag }}-${{ matrix.base_image.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔒 **Runtime Docker image built successfully but not pushed due to security restrictions**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "This is normal for:"
          echo "- Pull requests from forks"
          echo "- Dependabot updates"
          echo "- External contributions"
